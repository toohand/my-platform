<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 
  Title: ${title} 数据库操作
 * Description: ${description}
 * Company: hugeinfo
 * author: ${author}
 * time:${ctime}
 * version 1.0
-->
<mapper namespace="${packagename}.dao.mapper.${name}Dao">
    <!-- 结果集 -->
    <resultMap id="dataResult" type="${packagename}.domain.${name}">
        <#list jsons as json>
            <result property="${json.name}" column="${json.colum}"/>
        </#list>
    </resultMap>

    <sql id='TABLE_NAME'>${table}</sql>

    <sql id="column-part">
        <#list jsons as json>
        ${json.colum}<#if json_has_next>,</#if>
       </#list>
    </sql>

    <sql id="value-part">
        <#list jsons as json>
           ${"#{"}e.${json.name}:${json.jdbcType}}<#if json_has_next>,</#if>
        </#list>
    </sql>
    <sql id="set-part">
        <#list jsons as json>
          ${"<if test"}="e.${json.name} != null">${json.colum} = ${"#{"}e.${json.name}:${json.jdbcType}}, ${"</if>"}
        </#list>
    </sql>
    <sql id="where-part">
      <#list jsons as json>
         ${"<if test"}="w.${json.name} != null and w.${json.name} !=''">and ${json.colum} = ${"#{"}w.${json.name}} ${"</if>"}
        </#list>
    </sql>
    <!-- 新增 -->
    <insert id="insert">
        <selectKey keyProperty="e.id" resultType="java.lang.Long" order="BEFORE">
            SELECT MYBATIS_SEQUE.NEXTVAL as id FROM DUAL
        </selectKey>
        insert into
        <include refid="TABLE_NAME"/>
        (
        <include refid="column-part"/>
        )
        values
        (
        <include refid="value-part"/>
        )
    </insert>
    <!-- 批量新增 -->
    <insert id="insertBatch" parameterType="List" keyProperty="id">
        insert into
        <include refid="TABLE_NAME"/>
        (
        <include refid="column-part"/>
        )
        select MYBATIS_SEQUE.NEXTVAL,a.* from(
        <foreach collection="list" item="e" index="index" separator="union all">
            select
            <include refid="value-part"/>
            from dual
        </foreach>
        ) a
    </insert>

    <!-- 更新对象 -->
    <update id="update">
        update
        <include refid="TABLE_NAME"/>
        <set>
            <include refid="set-part"/>
        </set>
        <where>
            ${key} = ${"#{"}e.${key}}
        </where>
    </update>
    <!-- 条件更新 -->
    <update id="updateMap">
        update
        <include refid="TABLE_NAME"/>
        <set>
            <include refid="set-part"/>
        </set>
        <where>
            <include refid="where-part"/>
        </where>
    </update>

    <!-- 根据主键删除 -->
    <delete id="deleteByKey">
        delete from
        <include refid="TABLE_NAME"/>
        where  ${key} = ${"#{"}key}
    </delete>

    <!-- 根据条件删除  -->
    <delete id="delete" >
        delete from
        <include refid="TABLE_NAME"/>
        <where>
            <include refid="where-part"/>
        </where>
    </delete>

    <!-- 批量删除 -->
    <delete id="deleteBatch">
        delete from
        <include refid="TABLE_NAME"/>
        where ${key} in
        <foreach item="item" index="object" collection="w" open="(" separator="," close=")">
            ${"#{"}item}
        </foreach>
    </delete>

    <select id="fetch" resultMap="dataResult">
        select * from
        <include refid="TABLE_NAME"/>
        <where>
            ${key} = ${"#{"}key}
        </where>
    </select>

    <!-- 根据条件查询总 -->
    <select id="count" resultType="long">
        select count(*) from
        <include refid="TABLE_NAME"/>
        <where>
            <include refid="where-part"/>
        </where>
    </select>
    <!-- 根据条件查询 -->
    <select id="list" resultMap="dataResult">
        select * from
        <include refid="TABLE_NAME"/>
        <where>
            <include refid="where-part"/>
        </where>
        <if test="sort != null">
          <foreach collection="sort" item="s" index="index" separator="," open="order by ">
              ${"${"}s.property} ${"${"}s.direction}
          </foreach>
        </if>
        <if test="sort == null">
            order by  ${key} desc
        </if>
    </select>

    <select id="page"  resultMap="dataResult">
        select * from (
          select temp.*,rownum row_num from(
            select * FROM
            <include refid="TABLE_NAME"/>tabl
            <where>
                <include refid="where-part"/>
            </where>
            <if test="page.sort != null">
               <foreach collection="page.sort" item="s" index="index" separator="," open="order by ">
                   ${"${"}s.property} ${"${"}s.direction}
               </foreach>
            </if>
            <if test="page.sort == null">
                order by  ${key} desc
             </if>
          ) temp
        ) temp1
        <where>
            <![CDATA[ temp1.row_num > ${"#{"}page.offset} and temp1.row_num <=  ${"#{"}page.offset} + ${"#{"}page.size} ]]>
        </where>
    </select>
</mapper> 